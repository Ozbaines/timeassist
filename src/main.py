import datetime
import json
import re
import threading
import time
from collections import namedtuple
import requests

from scheduler import book_timeslot, check_event_exists

with open("/timeassist/src/config/config.json", "r") as config_file: #–î–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: /timeassist/src/config/config.json –î–ª—è –ª–æ–∫–∞–ª:"config/config.json"
    config = json.load(config_file)
    api_key = config["api_key"]

# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
events_list = []

# –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∫–æ—Ä—Ç–µ–∂ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ getLastMessage
MessageData = namedtuple(
    "MessageData", ["last_msg", "chat_id", "update_id", "user_name", "message_id"]
)


def getLastMessage(offset=None):
    url = f"https://api.telegram.org/bot{api_key}/getUpdates"
    params = {"timeout": 60, "offset": offset} if offset else {"timeout": 60}
    response = requests.get(url, params=params)
    data = response.json()

    if not data.get("result"):
        # print("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return None, offset

    last_update = data["result"][-1]
    if "message" not in last_update:
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö 'message'.")
        return None, offset

    last_msg = last_update["message"].get("text", "")
    chat_id = last_update["message"]["chat"]["id"]
    update_id = last_update["update_id"]
    user_name = last_update["message"]["from"].get("first_name", "Unknown")
    message_id = last_update["message"]["message_id"]

    return MessageData(last_msg, chat_id, update_id, user_name, message_id), update_id + 1

def setMessageReaction(chat_id, message_id, reaction=None):
    url = f"https://api.telegram.org/bot{api_key}/setMessageReaction"
    payload = {
        "chat_id": chat_id,
        "message_id": message_id,
        "reaction": reaction if reaction else [{"type": "emoji", "emoji": "üëç"}]
    }
    response = requests.post(url, json=payload)
    return response.json()

def sendMessage(chat_id, text_message):
    url = f"https://api.telegram.org/bot{api_key}/sendMessage?text={text_message}&chat_id={chat_id}"
    response = requests.get(url)
    return response


def parse_event_message(message):
    try:
        normalized_msg = ' '.join(message.lower().strip().split())
        date_keywords = {
            '–∑–∞–≤—Ç—Ä–∞': (datetime.date.today() + datetime.timedelta(days=1)).strftime('%d.%m.%Y'),
            '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞': (datetime.date.today() + datetime.timedelta(days=2)).strftime('%d.%m.%Y')
        }
        keyword_variations = {
            '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞': ['–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–æ', '–ø–æ—Å–ª–µ –∑–∞–≤—Ç—Ä–∞', 'poslezavtra'],
            '–∑–∞–≤—Ç—Ä–∞': ['–∑–∞–≤—Ç—Ä–∞', '–∑–∞–≤—Ç—Ä–æ', 'zavtra']    
        }
        weekdays = {
            '–≤ —ç—Ç–æ—Ç –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0, '–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0, '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0, 'v ponedelnik': 0, '–≤–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0, 'vponedelnik': 0, '–ø–æ–Ω–∏–¥–µ–ª—å–Ω–∏–∫': 0, 'monday': 0, 
            '–≤ —ç—Ç–æ—Ç –≤—Ç–æ—Ä–Ω–∏–∫': 1, '–≤–æ –≤—Ç–æ—Ä–Ω–∏–∫': 1, '–≤ –≤—Ç–æ—Ä–Ω–∏–∫': 1, '–≤—Ç–æ—Ä–Ω–∏–∫': 1, 'v vtornik': 1, 'vo vtornik': 1, 'tuesday': 1, 
            '–≤ —ç—Ç—É —Å—Ä–µ–¥—É': 2, '–≤ —Å—Ä–µ–¥—É': 2, '—Å—Ä–µ–¥–∞': 2, '—Å—Ä–µ–¥—É': 2, 'wednesday': 2,
            '–≤ —ç—Ç–æ—Ç —á–µ—Ç–≤–µ—Ä–≥': 3, '–≤ —á–µ—Ç–≤–µ—Ä–≥': 3, '—á–µ—Ç–≤–µ—Ä–≥': 3, 'Thursday': 3,
            '–≤ —ç—Ç—É –ø—è—Ç–Ω–∏—Ü—É': 4, '–≤ –ø—è—Ç–Ω–∏—Ü—É': 4, '–ø—è—Ç–Ω–∏—Ü–∞': 4, '–ø—è—Ç–Ω–∏—Ü—É': 4, 'friday': 4,
            '–≤ —ç—Ç—É —Å—É–±–±–æ—Ç—É': 5, '–≤ —Å—É–±–±–æ—Ç—É': 5, '—Å—É–±–±–æ—Ç–∞': 5, '—Å—É–±–±–æ—Ç—É': 5, 'subbota': 5, 'subboty': 5, 'saturday': 5,
            '–≤ —ç—Ç–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6, '–≤ —ç—Ç–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ': 6, '–≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ': 6, '–≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6, '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6, '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—é': 6, '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ': 6, 'voskresenie': 6, 'sunday': 6
        }
        for base_keyword, date_str in date_keywords.items():
            for variation in keyword_variations.get(base_keyword, [base_keyword]):
                if variation in normalized_msg:
                    message = normalized_msg.replace(variation, date_str)
                    break

        for day_name, day_num in weekdays.items():
            if day_name in normalized_msg:
                days_ahead = (day_num - datetime.date.today().weekday()) % 7
                if days_ahead == 0:  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                    days_ahead = 7    # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π
                target_date = datetime.date.today() + datetime.timedelta(days=days_ahead)
                date_str = target_date.strftime('%d.%m.%Y')
                message = normalized_msg.replace(day_name, date_str)
                break
        
            # ---------
        date_pattern = r"(?:\d{2}[./-]\d{2}[./-]\d{4}|\d{2}[./-]\d{2}[./-]\d{2}|\d{4}[./-]\d{2}[./-]\d{2})"
        
        datedetect = re.search(date_pattern, message)
        if datedetect:
            date = datedetect.group(0)
            day = date.replace("/", ".").replace("-", ".")
            if len(day.split('.')[2]) == 2:
                day2, month, year = day.split('.')
                day = f"{day2}.{month}.20{year}"
            text = message.replace(date, "")
        else:
            return None

        time_patterns = [
            r'–≤ (\d{2}):(\d{2})',      # –≤ 20:30
            r'–≤ (\d{2}) (\d{2})',      # –≤ 20 30
            r'–≤ (\d{2})(?::| )?',       # –≤ 20 (—Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ : –∏–ª–∏ –ø—Ä–æ–±–µ–ª–æ–º –ø–æ—Å–ª–µ)
            r'(\d{2}):(\d{2})',         # –ø—Ä–æ—Å—Ç–æ 20:30
            r'(\d{2}) (\d{2})',         # –ø—Ä–æ—Å—Ç–æ 20 30
        ]
        time = None
        for pattern in time_patterns:
            match = re.search(pattern, text)
            if match:
                groups = match.groups()
                if len(groups) == 2:
                    hours, minutes = groups
                else:
                    hours = groups[0]
                    minutes = "00"
                if 0 <= int(hours) <= 23 and 0 <= int(minutes) <= 59:
                    time = f"{int(hours):02d}:{int(minutes):02d}"
                    text = text[:match.start()] + text[match.end():]
                    break  
        if not time:
            return None 
        
        event = ' '.join(text.strip().split())
        return {"time": time, "day": day, "event": event}
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏—è '{message}': {str(e)}")
        return None

def add_event_to_list(event_time, event_date, event_name, chat_id, event_id):
    event_datetime = datetime.datetime.strptime(
        f"{event_date} {event_time}", "%d.%m.%Y %H:%M"
    )
    events_list.append(
        {
            "datetime": event_datetime,
            "name": event_name,
            "chat_id": chat_id,
            "event_id": event_id,
        }
    )


def check_reminders():
    while True:
        now = datetime.datetime.now()
        for event in events_list[:]:
            time_difference = (event["datetime"] - now).total_seconds()
            if 0 < time_difference <= 1800:
                if check_event_exists(event["event_id"]):
                    reminder_message = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–æ–±—ã—Ç–∏–µ '{event['name']}' –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç!"
                    sendMessage(event["chat_id"], reminder_message)
                events_list.remove(event)
                print(f"–°–æ–±—ã—Ç–∏–µ '{event['name']}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
            elif time_difference <= 0:
                events_list.remove(event)
                print(
                    f"–°–æ–±—ã—Ç–∏–µ '{event['name']}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ)."
                )
        time.sleep(60)


def run():
    offset = None

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    reminder_thread = threading.Thread(target=check_reminders, daemon=True)
    reminder_thread.start()

    while True:
        try:
            message_data, offset = getLastMessage(offset)
            if message_data is None:
                continue
            
            if "@timeassistBot" in message_data.last_msg:
                message = message_data.last_msg.replace("@timeassistBot", "").strip()
                parsed_event = parse_event_message(message)
                if message.lower() == "/help":
                    help_message = """
    üìå *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*
    1. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    *"–¥–¥.–º–º.–≥–≥ —á—á:–º–º —Å–æ–±—ã—Ç–∏–µ"*
    –ù–∞–ø—Ä–∏–º–µ—Ä: "12.12.2023 15:30 –í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º"

    2. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞:
    - "–∑–∞–≤—Ç—Ä–∞ 10:00 –°–æ–≤–µ—â–∞–Ω–∏–µ"
    - "–≤ –ø—è—Ç–Ω–∏—Ü—É –≤ 18:00 –£–∂–∏–Ω"

    3. –ë–æ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç –æ —Å–æ–±—ã—Ç–∏–∏ –∑–∞ 30 –º–∏–Ω—É—Ç
                    """
                    sendMessage(message_data.chat_id, help_message)
                    continue
                if parsed_event:
                    event_id = book_timeslot(
                        parsed_event["event"],
                        parsed_event["time"],
                        parsed_event["day"],
                        message_data.user_name,
                    )
                    if event_id:
                        setMessageReaction(message_data.chat_id, message_data.message_id)
                        add_event_to_list(
                            parsed_event["time"],
                            parsed_event["day"],
                            parsed_event["event"],
                            message_data.chat_id,
                            event_id,
                        )
                        print(
                            f"–°–æ–±—ã—Ç–∏–µ '{parsed_event['event']}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (ID: {event_id})."
                        )
                    else:
                        sendMessage(
                            message_data.chat_id,
                            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ò—Å–ø–æ–ª—å–∑—É–π @timeassistBot /help",
                        )
                else:
                    sendMessage(
                        message_data.chat_id,
                        "–ü—Ä–∏–≤–µ—Ç, –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –¥–∞—Ç—É –∏–ª–∏ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É–π: –¥–¥.–º–º.–≥–≥, —á—á:–º–º, —Å–æ–±—ã—Ç–∏–µ. –í—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è.",
                    )
            else:
                continue

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            continue


if __name__ == "__main__":
    run()
